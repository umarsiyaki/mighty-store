
       
   ```

   - Here, we're using the `fetch` API to get the product data from the backend. Once the data is received, we loop through each product and create HTML elements to display them.

### 5. **Styling the Page:**
   Ensure that your CSS is properly set up in the `styles.css` file to style your product cards.

   Example:
   ```css
   
   ```

   - This will make your marketing page display the products in a responsive grid.

### 6. **Dynamic Links and Further Enhancements:**
   In your `product.html`, you can further enhance it by dynamically displaying the product details based on the URL query parameters .

   For example, in `product.html`:
   ```html
   ```

   - Ensure your backend has an API endpoint like `/api/products/:id` to fetch individual product details.

---

### Summary:
- **Backend:** Set up routes to serve the products dynamically using Express.js.
- **Frontend:** Fetch product data via `fetch()` and dynamically display it using JavaScript.
- **CSS:** Style the product cards to make them visually appealing and responsive.

With this setup, your marketing page should dynamically fetch and display products, allowing users to view and interact with them.The `marketing.html` file seems to be the frontend structure for your marketing page with product sections displayed. Now, to implement the message and notification functionality, we will set up the following steps:

### Steps:

1. **Create Endpoints for Messages and Notifications (Backend)**:
    Ensure your backend exposes API endpoints that fetch messages and notifications for each user role. These endpoints will return the necessary data (e.g., unread messages, notifications, timestamps).

2. **Create Message and Notification Fetch Functions (Frontend)**:
    On the frontend, we will write JavaScript functions to fetch data for both messages and notifications. These functions will be invoked when the dropdowns are clicked.

3. **Update the UI Dynamically**:
    Dynamically load the fetched messages/notifications into the dropdowns within the `marketing.html` file.

### Sample Backend API Routes (Express.js)
Make sure to have these routes in your `controller/notification.js` and `controller/message.js`.

```js

```

```js

```

### Frontend: Fetching and Displaying Data (JavaScript)
Add the following JavaScript to fetch the data and display it dynamically in the dropdowns.

```html
```

### Integrating into `marketing.html`
Now, update the dropdown classes in `marketing.html` to trigger the fetch functions. Ensure the dropdowns have the correct classes:

```html

```

This setup will dynamically load messages and notifications from the backend whenever the respective dropdowns are clicked, improving user interactivity.

Let me know if you need help with specific parts of the code!To achieve your goals for the marketing page using the provided `marketing.html` and `marketing.js` files, here are the step-by-step instructions:

### 1. **Integrate Product Calculator Functionality**

You want the product calculator to dynamically update product quantities, prices, and other details on the marketing page.

#### Steps:
1. **Add Event Listeners to the Calculator Buttons**:
    - Open `marketing.js`.
    - Identify the calculator buttons for addition, subtraction, multiplication, and division.
    - Attach event listeners to these buttons to trigger calculations when clicked.

    ```javascript
    

3. **Update Product Details**:
    - When a calculator button is clicked, the product details (quantity, price, etc.) should be updated based on the calculation.
    - Write the necessary JavaScript code to handle this logic and update the UI accordingly.

    ```javascript
    
    ```

4. **Post Updates to the Server**:
    - After updating the product details on the UI, send the updated data back to the server to keep the database in sync.
    - This can be done using a `POST` request in JavaScript.

    ```javascript
    ```

### 2. **Ensure Proper DOM Manipulation**

Make sure the `marketing.js` script correctly manipulates the DOM to display the updated product information. The script should:
- Update product quantities, prices, and other relevant details in real time.
- Reflect these changes both on the frontend (UI) and backend (database).

### 3. **Modify HTML Structure If Needed**

If your current `marketing.html` does not fully support the functionalities you need, consider making structural changes to the HTML:
- Add placeholders or elements for dynamic content updates (e.g., product details, quantities).
- Ensure that these elements have unique IDs or classes for easy targeting by JavaScript.

### 4. **Test the Functionality**

Finally, test the functionality:
- Ensure that all calculator operations update the product information as expected.
- Check that the UI reflects these changes and that the backend data is updated accordingly.
- Verify that the integration with `marketing.js` works seamlessly with the HTML structure.

By following these steps, you can achieve the goals you have for integrating a calculator into your marketing page, updating product details dynamically, and ensuring that everything is synced with your backend.
Understood. Based on your goals and the provided HTML, here's a structured approach to achieving them:

### Objective
To create a marketing page that incorporates sections for showcasing products, navigating between store features, and interacting with the inventory system. This page should dynamically display products, have functional navigation elements, and respond to user interaction.

### Instructions

1. **Setting up the HTML Layout**
   - Your HTML layout will include sections for **product displays**, **search functionality**, and **interactive elements** like buttons or links that trigger store-related actions.
   - You mentioned focusing on elements such as product showcases, navbar links, product management, and interactive buttons for updating product details. Hereâ€™s how you can implement it:

#### HTML Structure Example:
```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marketing Page</title>
    <link rel="stylesheet" href="path/to/bootstrap.css">
    <link rel="stylesheet" href="styles.css"> <!-- Custom Styles -->
</head>

<body>
    <!-- Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Store</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav"
            aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="products.html">Products</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="addproduct.html">Add Product</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="trackorder.html">Track Order</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="store.html">Store</a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Hero Section -->
    <header class="hero-section text-center">
        <h1>Welcome to Our Store!</h1>
        <p>Your one-stop shop for all things amazing.</p>
        <button class="btn btn-primary">Explore Products</button>
    </header>

    <!-- Product Showcase Section -->
    <section class="product-showcase container mt-5">
        <div class="row">
            <div class="col-md-4 product-card">
                <img src="path/to/product1.jpg" class="img-fluid" alt="Product Image">
                <h4>Product Name 1</h4>
                <p>$20.00</p>
                <a href="#" class="btn btn-info">Buy Now</a>
            </div>
            <!-- Repeat Product Cards for more items -->
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer bg-dark text-light text-center py-4">
        <p>&copy; 2024 Your Store. All rights reserved.</p>
    </footer>

    <!-- Bootstrap JS and other scripts -->
    <script src="path/to/bootstrap.js"></script>
    <script src="scripts.js"></script> <!-- Custom Script -->
</body>

</html>
```

### Key Elements:
1. **Navbar:**
   - `Products`, `Add Product`, `Track Order`, and `Store` links will allow users to navigate to different parts of your inventory system.
   - You may need to adjust the paths of the links depending on your file structure and backend routes.

2. **Hero Section:**
   - Acts as a welcoming section with a **call-to-action** button (e.g., "Explore Products") that can navigate users to the product section or another specific page.

3. **Product Showcase:**
   - Products are displayed in cards. You can dynamically generate these cards with JavaScript by pulling product data from your backend (via an API or database call).

4. **Footer:**
   - A simple footer with store information.

### Adding Dynamic Product Data with JavaScript
To dynamically populate the product section based on your inventory data, you can use JavaScript to pull product details from your server and render them.

#### Example Script (scripts.js):
```javascript
document.addEventListener('DOMContentLoaded', function () {
    // Fetch products from an API or database
    fetch('/api/products')
        .then(response => response.json())
        .then(products => {
            const productContainer = document.querySelector('.product-showcase .row');
            products.forEach(product => {
                const productCard = `
                    <div class="col-md-4 product-card">
                        <img src="${product.image}" class="img-fluid" alt="Product Image">
                        <h4>${product.name}</h4>
                        <p>$${product.price}</p>
                        <a href="/buy/${product.id}" class="btn btn-info">Buy Now</a>
                    </div>
                `;
                productContainer.innerHTML += productCard;
            });
        })
        .catch(error => console.error('Error fetching products:', error));
});
```

### Linking to Backend API and Routes
To ensure your marketing page works seamlessly with the backend, ensure your routes are correctly set up in your Express.js server.

#### Example Backend Setup (app.js):
```javascript
;
```

### Enhancing the Marketing Page:
- **Slideshow for New Products:** Incorporate Bootstrapâ€™s carousel component to showcase newly added products.
- **Interactive Elements:** Ensure that buttons like "Buy Now" or "Add Product" trigger the appropriate actions, such as adding to the cart or navigating to a payment page.
  
By following this approach, your marketing page will dynamically display products, interact with the backend to fetch data, and allow users to navigate between store features.

To accomplish this, we'll break the task into multiple steps, covering both the front-end (`.ejs` templates) and back-end (`app.js`), and ensuring everything integrates with MongoDB/Mongoose securely.

### 1. **EJS Views with Partial Templates**

First, we'll structure the `.ejs` files. We'll use partials for common elements like the navigation bar, header, and footer. We'll also set up conditional rendering based on the user's role (admin, cashier, or user).

#### File Structure:
```plaintext
/views
    /partials
        _navbar.ejs
        _header.ejs
        _footer.ejs
    /admin
        dashboard.ejs
        addProduct.ejs
        manageUsers.ejs
    /cashier
        dashboard.ejs
        processOrder.ejs
    /user
        dashboard.ejs
        purchaseHistory.ejs
    index.ejs
    login.ejs
    register.ejs
```

#### Example: `_navbar.ejs`
```ejs
<nav>
  <ul>
    <li><a href="/">Home</a></li>
    <% if (role === 'admin') { %>
      <li><a href="/admin/dashboard">Admin Dashboard</a></li>
      <li><a href="/admin/addProduct">Add Product</a></li>
      <li><a href="/admin/manageUsers">Manage Users</a></li>
    <% } else if (role === 'cashier') { %>
      <li><a href="/cashier/dashboard">Cashier Dashboard</a></li>
      <li><a href="/cashier/processOrder">Process Order</a></li>
    <% } else if (role === 'user') { %>
      <li><a href="/user/dashboard">User Dashboard</a></li>
      <li><a href="/user/purchaseHistory">Purchase History</a></li>
    <% } %>
    <li><a href="/logout">Logout</a></li>
  </ul>
</nav>
```

#### Example: `admin/dashboard.ejs`
```ejs
<%- include('../partials/_header') %>
<%- include('../partials/_navbar', { role: 'admin' }) %>

<h1>Admin Dashboard</h1>
<p>Welcome, <%= user.name %>!</p>

<%- include('../partials/_footer') %>
```

### 2. **Backend: `app.js` Setup**

We'll set up the `app.js` file to handle routing, sessions, validation, and integration with MongoDB/Mongoose.

#### `app.js` Example:
```javascript

```

### 3. **Mongoose Models**

#### `User.js` Example:
```javascript

```

#### `Product.js` Example:
```javascript
```

### 4. **Routes**

#### Example: `routes/admin.js`
```javascript
const express = require('express');
const router = express.Router();
const { ensureAuthenticated, ensureAdmin } = require('../middleware/auth');
const Product = require('../models/Product');

// Admin Dashboard
router.get('/dashboard', ensureAuthenticated, ensureAdmin, (req, res) => {
  res.render('admin/dashboard', { user: req.user });
});

// Add Product
router.get('/addProduct', ensureAuthenticated, ensureAdmin, (req, res) => {
  res.render('admin/addProduct');
});

router.post('/addProduct', ensureAuthenticated, ensureAdmin, async (req, res) => {
  const { vendorCategory, brandCategory, productSize, productName, productPrice, image } = req.body;
  
  try {
    const newProduct = new Product({ vendorCategory, brandCategory, productSize, productName, productPrice, image });
    await newProduct.save();
    req.flash('success_msg', 'Product added successfully');
    res.redirect('/admin/dashboard');
  } catch (error) {
    req.flash('error_msg', 'Error adding product');
    res.redirect('/admin/addProduct');
  }
});

// Other routes like managing users, updating, deleting products go here

module.exports = router;
```

#### Middleware: `auth.js`
```javascript
module.exports = {
  ensureAuthenticated: (req, res, next) => {
    if (req.isAuthenticated()) {
      return next();
    }
    req.flash('error_msg', 'Please log in to view that resource');
    res.redirect('/login');
  },
  ensureAdmin: (req, res, next) => {
    if (req.user && req.user.role === 'admin') {
      return next();
    }
    req.flash('error_msg', 'Admin privileges required');
    res.redirect('/');
  },
  // Similar middleware for cashier, user roles
};
```

### 5. **Security Considerations**

- **MongoDB Connection Security**: Make sure you're using a secure connection string, and consider adding retry logic or connection pooling.
- **Sessions**: Use secure cookies (`secure: true`) in production and consider implementing CSRF protection.
- **Password Hashing**: Ensure passwords are hashed with bcrypt or similar.

### 6. **Testing and Deployment**

- **Testing**: Validate each route, form submission, and session handling. Also, ensure all EJS templates render correctly based on user roles.
- **Deployment**: Ensure environment variables (`MONGODB_URI`, `SESSION_SECRET`, etc.) are properly configured on the production server.

By following these steps, you can create a secure, role-based inventory system with dynamic content handling using EJS, Express, and MongoDB/Mongoos

To set up your server, I'll guide you through including your assets and HTML files, handling security measures, and integrating two-factor authentication. Here's a step-by-step approach:

### 1. **Setting Up `app.js`:**

```javascript

```

### 2. **Public Folder Structure:**
Make sure your `public` folder is structured as follows:
```
public/
  assets/
    css/
    images/
    js/
  views/
    partials/
      header.ejs
      footer.ejs
      navbar.ejs
    404.ejs
    addproduct.ejs
    addcashier.ejs
    updatecashier.ejs
    admin.ejs
    cashier.ejs
    user.ejs
    marketing.ejs
    index.ejs
    payment.ejs
    receipt.ejs
    calculator.ejs
    register.ejs
    login.ejs
    signup.ejs
    widgets.ejs
```

### 3. **EJS Partial Views Setup:**
To handle dynamic datasets and roles like user, cashier, and admin, create partial views:

**`partials/header.ejs`:**
```html
<header>
  <nav>
    <!-- Dynamic Navbar based on role -->
    <%- include(`partials/navbar-${role}`) %>
  </nav>
</header>
```

**`partials/navbar-admin.ejs`:**
```html
<ul>
  <li><a href="/admin/dashboard">Dashboard</a></li>
  <li><a href="/admin/products">Manage Products</a></li>
  <!-- Add more links as needed -->
</ul>
```

**`partials/navbar-cashier.ejs`:**
```html
<ul>
  <li><a href="/cashier/sales">Sales</a></li>
  <li><a href="/cashier/transactions">Transactions</a></li>
  <!-- Add more links as needed -->
</ul>
```

**`partials/navbar-user.ejs`:**
```html
<ul>
  <li><a href="/user/profile">Profile</a></li>
  <li><a href="/user/orders">Orders</a></li>
  <!-- Add more links as needed -->
</ul>
```

**`partials/footer.ejs`:**
```html
<footer>
  <p>&copy; 2024 Your Company Name. All rights reserved.</p>
</footer>
```

### 4. **Security Enhancements:**
- **Rate Limiting**: Protects against brute-force attacks by limiting repeated requests.
- **CSRF Protection**: Helps prevent CSRF attacks.
- **Session Security**: Secure cookies, `httpOnly`, and use `secure` in production with HTTPS.
- **Two-Factor Authentication**: Implement using libraries like `speakeasy` or Google Authenticator.

### 5. **Two-Factor Authentication (2FA):**
Hereâ€™s a basic setup for 2FA:

```javascript
const speakeasy = require('speakeasy');
const qrcode = require('qrcode');

// Generate a 2FA secret key
app.get('/generate-2fa', (req, res) => {
  const secret = speakeasy.generateSecret({ length: 20 });
  qrcode.toDataURL(secret.otpauth_url, (err, data_url) => {
    res.render('2fa', { qrCode: data_url, secret: secret.base32 });
  });
});

// Verify the token
app.post('/verify-2fa', (req, res) => {
  const verified = speakeasy.totp.verify({
    secret: req.body.secret,
    encoding: 'base32',
    token: req.body.token
  });
  if (verified) {
    res.send('2FA verified');
  } else {
    res.status(400).send('Invalid token');
  }
});
```

This setup gives you a robust foundation to serve your HTML files, secure your server, and handle dynamic datasets in your application.e.








To ensure that all routes and functionalities are included and connected to your database, we'll structure the application by creating routes, controllers, and models for handling each specific functionality.

### **1. Models (`models.js`):**

Ensure that the database schemas are well-defined with the correct fields:

```javascript
const mongoose = require('mongoose');

// Cashier Schema
const cashierSchema = new mongoose.Schema({
    username: { type: String, required: true },
    email: { type: String, required: true },
    phone: { type: String, required: true },
    address: { type: String, required: true },
    password: { type: String, required: true },
}, { timestamps: true });

const Cashier = mongoose.model('Cashier', cashierSchema);

// Admin Schema
const adminSchema = new mongoose.Schema({
    username: { type: String, required: true },
    email: { type: String, required: true },
    phone: { type: String, required: true },
    address: { type: String, required: true },
    password: { type: String, required: true },
}, { timestamps: true });

const Admin = mongoose.model('Admin', adminSchema);

// Product Schema
const productSchema = new mongoose.Schema({
    productName: { type: String, required: true },
    category: { type: String, required: true },
    price: { type: Number, required: true },
    quantity: { type: Number, required: true },
    description: { type: String },
    rating: { type: Number, default: 0 },
}, { timestamps: true });

const Product = mongoose.model('Product', productSchema);

// Market Schema
const marketSchema = new mongoose.Schema({
    productname: { type: String, required: true },
    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
    productCategory: { type: String, required: true },
    productPrice: { type: Number, required: true },
    productTrackingId: { type: String, required: true },
    store: { type: String, required: true },
    quantity: { type: Number, required: true },
}, { timestamps: true });

const Market = mongoose.model('Market', marketSchema);

// Blog Schema
const blogSchema = new mongoose.Schema({
    authorName: { type: String, required: true },
    authorImage: { type: String, required: true },
    comment: { type: String, required: true },
    address: { type: String, required: true },
    // Add other blog fields as necessary
}, { timestamps: true });

const Blog = mongoose.model('Blog', blogSchema);

// User Schema
const userSchema = new mongoose.Schema({
    firstName: { type: String, required: true },
    middleName: { type: String },
    lastName: { type: String, required: true },
    username: { type: String, required: true },
    email: { type: String, required: true },
    phone: { type: String, required: true },
    address: { type: String, required: true },
    password: { type: String, required: true },
    role: { type: String, enum: ['admin', 'moderator', 'cashier', 'user'], required: true },
    profilePicture: { type: String },
}, { timestamps: true });

const User = mongoose.model('User', userSchema);

// Other schemas like orders, receipts, etc. will follow a similar pattern.

module.exports = {
    Cashier,
    Admin,
    Product,
    Market,
    Blog,
    User
    // Add other models as necessary
};
```

### **2. Controllers (`controllers`):**

Create controllers for handling specific logic, e.g., signup, login, product management, etc.

**User Controller (`controllers/userController.js`):**

```javascript
const User = require('../models').User;
const bcrypt = require('bcrypt');
const passport = require('passport');

// Signup User
exports.signup = async (req, res) => {
    const { firstName, middleName, lastName, username, email, phone, address, password, role } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({
        firstName,
        middleName,
        lastName,
        username,
        email,
        phone,
        address,
        password: hashedPassword,
        role
    });

    user.save()
        .then(() => res.redirect('/login'))
        .catch(err => res.status(400).render('signup', { error: 'Failed to create account', err }));
};

// Login User
exports.login = (req, res, next) => {
    passport.authenticate('local', {
        successRedirect: '/dashboard',
        failureRedirect: '/login',
        failureFlash: true
    })(req, res, next);
};

// Other user functionalities
```

**Product Controller (`controllers/productController.js`):**

```javascript
const Product = require('../models').Product;

// Add Product
exports.addProduct = async (req, res) => {
    const { productName, category, price, quantity, description } = req.body;

    const product = new Product({
        productName,
        category,
        price,
        quantity,
        description
    });

    product.save()
        .then(() => res.redirect('/admin/products'))
        .catch(err => res.status(400).render('addproduct', { error: 'Failed to add product', err }));
};

// Edit Product
exports.editProduct = async (req, res) => {
    const { id } = req.params;
    const updatedData = req.body;

    Product.findByIdAndUpdate(id, updatedData, { new: true })
        .then(() => res.redirect('/admin/products'))
        .catch(err => res.status(400).render('editproduct', { error: 'Failed to update product', err }));
};

// Delete Product
exports.deleteProduct = async (req, res) => {
    const { id } = req.params;

    Product.findByIdAndDelete(id)
        .then(() => res.redirect('/admin/products'))
        .catch(err => res.status(400).render('products', { error: 'Failed to delete product', err }));
};

// Other product functionalities
```

### **3. Routes (`routes`):**

Organize your routes based on functionality, linking them to the appropriate controller actions.

**User Routes (`routes/user.js`):**

```javascript
const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');

// Signup Route
router.post('/signup', userController.signup);

// Login Route
router.post('/login', userController.login);

// Other user-related routes

module.exports = router;
```

**Admin Routes (`routes/admin.js`):**

```javascript
const express = require('express');
const router = express.Router();
const productController = require('../controllers/productController');

// Add Product Route
router.post('/add-product', productController.addProduct);

// Edit Product Route
router.post('/edit-product/:id', productController.editProduct);

// Delete Product Route
router.post('/delete-product/:id', productController.deleteProduct);

// Other admin-related routes

module.exports = router;
```

### **4. Integrate into `app.js`:**

Ensure all routes are included in your `app.js`:

```javascript
const express = require('express');
const path = require('path');
const mongoose = require('mongoose');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const passport = require('passport');
const flash = require('connect-flash');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');

const app = express();

// Security and rate-limiting
app.use(helmet());
app.use(rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100 // limit each IP to 100 requests per windowMs
}));

// Database connection
mongoose.connect('mongodb://localhost:27017/your-db-name', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useCreateIndex: true,
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

// Session setup
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true,
    store: MongoStore.create({
        mongoUrl: 'mongodb://localhost:27017/your-db-name',
        collectionName: 'sessions',
    }),
    cookie: {
        maxAge: 1000 * 60 * 60 * 24, // 1 day
        secure: true, // Set to true if using https
        httpOnly: true, // Prevents client-side JS from reading the cookie
    },
}));

// Initialize Passport
app.use(passport.initialize());
app.use(passport.session());

// Flash messages
app.use(flash());

// Set view engine
app.set('view engine', 'ejs');

// Static files
app.use(express.static(path.join(__dirname, 'public')));

// Body parsers
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes
app.use('/', require('./routes/index'));
app.use('/user', require('./routes/user'));
app.use('/admin', require('./routes/admin'));
// Add additional routes as needed

// Error handling
app.use((req, res) => {
    res.status(404).render('404', { title: '404 - Not Found' });
});

app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something went wrong!');
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running

 on port ${PORT}`));
```

### **5. Security Enhancements:**

Ensure the server is secure against various threats:

- **DDoS:** Use `express-rate-limit` to limit request rates.
- **Brute Force:** Implement strong password policies and rate-limit logins.
- **SQL Injection:** Use ORM/ODM (like Mongoose) that properly handles inputs.
- **Phishing:** Educate users and implement strong authentication practices like 2FA.

For two-factor authentication (2FA), you can integrate packages like `passport-2fa-totp` for Time-based One-Time Passwords (TOTP).

### **6. Dynamic Product Display on Landing Page:**

Ensure your landing page fetches and displays products dynamically from your database using a controller action that passes the data to the view.

**Example Controller for Landing Page:**

```javascript
const Product = require('../models').Product;

exports.landingPage = async (req, res) => {
    try {
        const products = await Product.find().sort({ createdAt: -1 }).limit(5); // Fetch 5 latest products
        res.render('landingPage', { products });
    } catch (err) {
        res.status(500).send('Failed to load products');
    }
};
```

Ensure this method is connected to the appropriate route and rendered in the `landingPage.ejs`.

This setup should cover the critical aspects of your application and integrate all the functionalities into a well-structured codebase. Let me know if you need any further assistance!